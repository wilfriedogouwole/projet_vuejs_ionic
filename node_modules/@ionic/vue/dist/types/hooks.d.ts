import { Ref, ComponentInternalInstance } from 'vue';
declare type Handler = (processNextHandler: () => void) => Promise<any> | void | null;
export interface IonRouter {
    canGoBack: (deep?: number) => boolean;
}
export interface IonKeyboardRef {
    isOpen: Ref<boolean>;
    keyboardHeight: Ref<number>;
    unregister: () => void;
}
export declare const useBackButton: (priority: number, handler: Handler) => {
    unregister: () => void;
};
export declare const useIonRouter: () => IonRouter;
export declare const useKeyboard: () => IonKeyboardRef;
export declare const onIonViewWillEnter: (hook: () => any, target?: ComponentInternalInstance | null) => Function;
export declare const onIonViewDidEnter: (hook: () => any, target?: ComponentInternalInstance | null) => Function;
export declare const onIonViewWillLeave: (hook: () => any, target?: ComponentInternalInstance | null) => Function;
export declare const onIonViewDidLeave: (hook: () => any, target?: ComponentInternalInstance | null) => Function;
export {};
